@test
operation testSelect() {
	var data := Sequence {0..9};
	var selected = data.select(n | (n > 3 and n <= 7) or n == 2);
	var expected := Sequence {2, 4, 5, 6, 7};
	assertEquals(expected, selected);
	selected = data.select(n | n > 10);
	assertEquals(Sequence{}, selected);
	selected = data.select(n | n < 10);
	assertEquals(data, selected);
	data = Bag{};
	selected = data.select(e|e);
	assertEquals(selected.getClass(), data.getClass());
	assertTrue(data.isEmpty());
	assertEquals(selected.size(), data.size());
}

@test
operation testSelectOne() {
	var data := Sequence {0..9};
	var selected = data.selectOne(n | n < 4 and n > 1);
	assertEquals(2, selected);
	selected = data.selectOne(n | n == 8);
	assertEquals(8, selected);
	selected = data.selectOne(n | n > 9);
	assertEquals(null, selected);
}

@test
operation testSelectFirst() {
	var data := Sequence {0..16};
	var selected = data.selectFirst(n | n.asString().length() > 1);
	assertEquals(10, selected);
	selected = data.selectFirst(n | n >= data.size()/2);
	assertEquals(8, selected);
	selected = data.selectFirst(n | n > 16);
	assertEquals(null, selected);
}

@test
operation testReject() {
	var data := Sequence {0..9};
	var rejected = data.reject(n | n < 1 or n > 6 or n == 5 and n <> 9);
	var expected := Sequence {1, 2, 3, 4, 6, 9};
	assertEquals(expected, rejected);
	rejected = data.reject(n | n > 10);
	assertEquals(data, rejected);
	rejected = data.reject(n | n < 10);
	assertEquals(Sequence{}, rejected);
}

@test
operation testRejectOne() {
	var data := Sequence {0..9};
	var rejected = data.rejectOne(n | n > 3);
	data.remove(4);
	assertEquals(data, rejected);
	data.add(4);
	rejected = data.rejectOne(n | n > 9);
	assertEquals(data, rejected);
}

@test
operation testExists() {
	var data := Sequence {0..9};
	var exists = data.exists(n | n > 3 and n < 8);
	assertTrue(exists);
	exists = data.exists(n | n < 0);
	assertFalse(exists);
}

@test
operation testOne() {
	var data := Sequence {0..10};
	var one = data.one(n | n > 3 and n < 7);
	assertFalse(one);
	one = data.one(n | n == 2 or (n > 1 and n < 3));
	assertTrue(one);
	one = data.one(n | n < 0);
	assertFalse(one);
	one = data.one(n | n < 5, 5);
	assertFalse(one);
	one = data.one(n | n == 8, 0);
	assertTrue(one);
}

@test
operation testNone() {
	var data := Sequence {0..10};
	var none = data.none(n | n == null);
	assertTrue(none);
	none = data.none(n | n > 7);
	assertFalse(none);
	none = data.none(n | n < 0, 10);
	assertTrue(none);
	none = data.none(n | n == 5, 1);
	assertFalse(none);
	none = data.none(n | n == null, 0);
	assertTrue(none);
}

@test
operation testAtMostNMatch() {
	var data := Sequence {1..16};
	assertTrue(data.atMostNMatch(n | n.mod(3) == 0, 5));
	assertFalse(data.atMostNMatch(n | n.mod(2) == 0, 4));
	assertTrue(data.atMostNMatch(n | n > 1, 16));
	assertFalse(data.atMostNMatch(n | n == 5 or n == 11 or n == 0 or n == 16, 1));
	assertTrue(data.atMostNMatch(n | n <= 0 or n > 16, 0));
}

@test
operation testAtLeastNMatch() {
	var data := Sequence {1..16};
	assertTrue(data.atLeastNMatch(n | n.mod(3) == 0, 5));
	assertFalse(data.atLeastNMatch(n | n.mod(2) == 0, 9));
	assertTrue(data.atLeastNMatch(n | n.mod(4) == 0, 3));
	assertFalse(data.atLeastNMatch(n | n <= 0 or n > 16, 1));
	assertTrue(data.atLeastNMatch(n | n <= 0 or n > 16, 0));
}

@test
operation testNMatch() {
	var data := Sequence {1..11};
	var three = data.nMatch(n | n.mod(3) == 0, 3);
	assertTrue(three);
	three = data.nMatch(n | n.mod(2) == 0, 3);
	assertFalse(three);
	var twelve = data.nMatch(n | n > 1, 12);
	assertFalse(twelve);
	var two = data.nMatch(n | n == 5 or n == 11, 2);
	assertTrue(two);
	two = data.nMatch(n | n == 0 or n == 10, 2);
	assertFalse(two);
	var twenty = data.nMatch(n | n < 12, 20);
	assertFalse(twenty);
}

@test
operation testCount() {
	var data := Sequence {-15..9};
	var actual = data.count(i | i > 0);
	assertEquals(9, actual);
	actual = data.count(i | i.mod(2) == 0 and i < -14);
	assertEquals(0, actual);
	actual = data.count(i | i == 0);
	assertEquals(1, actual);
	actual = data.count(i | true);
	assertEquals(data.size(), actual);
}

@test
operation testForAll() {
	var data := Sequence {0..10};
	var forAll = data.forAll(n | n > -1 and n <= 10);
	assertTrue(forAll);
	forAll = data.forAll(n | n < 9);
	assertFalse(forAll);
	forAll = data.forAll(n | n == 6, 1);
	assertFalse(forAll);
	forAll = data.forAll(n | n <> null and n.asString().length() <= 2, 17);
	assertTrue(forAll);
}

@test
operation testCollect() {
	var data := Sequence {0..9};
	var mapped = data.collect(n | n * n);
	var expected := Sequence {0, 1, 4, 9, 16, 25, 36, 49, 64, 81};
	assertEquals(expected, mapped);
	data = Sequence {12, 10, null, false, true, "str", 3.14, 8};
	mapped = data.collect(n | 10);
	expected := Sequence {10, 10, 10, 10, 10, 10, 10, 10};
	assertEquals(expected, mapped);
}

@test
operation testSortBy() {
	var data = Bag {"a", "aa", "", true, false, "          __a_ ", "---", 333, 1, 22, 666666};
	var expected = Sequence {"", "a", 1, "aa", 22, "---", 333, true, false, 666666, "          __a_ "};
	var sorted = data.sortBy(d | d.asString().length());
	assertEquals(expected, sorted);
}

@test
operation testMapBy() {
	var data = Bag {"", 1, true, false, 98, 3, 55, 0, 4443, 768, 12024, "eol", 640, "four", "null"};
	var expected : new Map;
	expected.put(0, Sequence{""});
	expected.put(1, Sequence{1, 3, 0});
	expected.put(2, Sequence{98, 55});
	expected.put(3, Sequence{768, "eol", 640});
	expected.put(4, Sequence{true, 4443, "four", "null"});
	expected.put(5, Sequence{false, 12024});
	var actual = data.mapBy(n | n.toString().length());
	assertEquals(expected, actual);
	data = Sequence{};
	actual = data.mapBy(n | n.toString().length());
	assertTrue(actual.entrySet().isEmpty());
}

@test
operation testAggregate() {
	var data = Bag {-127, -64, -2, 0, "", 32768};
	var expected = Map {
		4 = -127,
		3 = -64,
		2 = -2,
		1 = 0,
		0 = "",
		5 = 32768
	};
	var actual = data.aggregate(n | n.asString().length(), n);
	assertEquals(expected, actual);
	
	data.addAll(Bag {127, 16, true, 1, "", 9990, false, 111000});
	expected = Map {
		4 = "-127;true;9990;",
		3 = "-64;127;",
		2 = "-2;16;",
		1 = "0;1;",
		0 = ";;",
		5 = "32768;false;",
		6 = "111000;"
	};
	actual = data.aggregate(n | n.asString().length(), total+n.asString()+";", "");
	assertEquals(expected, actual);
}

@test
operation testClosure() {
	var e1 = "e1";
	var e2 = "e2";
	var e3 = "e3";
	
	e1.~next = e2;
	e2.~next = e3;
	e3.~next = e1;
	
	assertEquals(Sequence{e1, e2, e3}, e3.closure(c|c.~next));
	
}

@test
operation testClosureMany() {

	var e1 = "e1";
	var e2 = "e2";
	var e3 = "e3";
	var e4 = "e4";
	
	e1.~next = Sequence{e2};
	e2.~next = Sequence{e3, e4};
	e3.~next = Sequence{};
	e4.~next = Sequence{};
	
	assertEquals(Sequence{e2, e3, e4}, e1.closure(c|c.~next));
	

}

@test
operation testClosureIteratorType() {
	var seq = Sequence{"1"};
	assertEquals(Sequence{"2", "4", 3}, seq.closure(c:String|c.getChildren()));
	assertEquals(Sequence{"2", "4", 3, 5, 6}, seq.closure(c|c.getChildren()));
}

operation Any getChildren() {
	if (self == "1") {
		return Sequence{"2", 3};
	}
	else if (self == "2") {
		return "4";
	}
	else if (self == 3) {
		return Sequence{5, 6};
	}
	return Sequence{};
}
